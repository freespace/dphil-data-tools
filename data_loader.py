#!/usr/bin/env python
import numpy as np

class DataLoader(object):
  """
  This class abstract the process of loading data from a variety of formats,
  including CSVs and NPZ, generated by different data sources.
  """
  _datafilepath = None

  def __init__(self, datafilepath):
    self._datafilepath = datafilepath

    matrix = None
    source = None
    header = ''

    if datafilepath.endswith('csv'):
      import csvtools
      csv = csvtools.CSVReader(datafilepath)
      matrix = csv.mat
      source = csv.csv_source
      header = csv.header

    if datafilepath.endswith('trc'):
      from lecroy import LecroyBinaryWaveform
      bwave = LecroyBinaryWaveform(datafilepath)
      matrix = bwave.mat
      source = 'LECROYWR104Xi_binary'

    if datafilepath.endswith('.npz'):
      npzfile = np.load(datafilepath)
      if 'source' in npzfile:
        source = npzfile['source'].item()
      else:
        source = None

      if datafilepath.endswith('.power.npz'):
        matrix = npzfile['data']
        header = npzfile['header'].item()
        if source is None:
          source = 'calc_power_spectrum.py'

      if source == 'wzextract.py':
        matrix = npzfile['data']
        header = npzfile['header'].item()

      if source == 'average_traces.py':
        matrix = npzfile['data']
        header = npzfile['header'].item()

      if type(header) is dict:
        import json
        header = json.dumps(header, indent=1, sort_keys=True)

    assert matrix is not None
    assert type(header) == str

    self.matrix = matrix
    self.header = header
    self.source = source

  @property
  def xy_labels(self):
    source = self.source
    ret = 'X LABEL', 'Y LABEL'
    if source is not None:
      if source == 'SIOS':
        ret = 'Z Position (mm)', 'Fluoresence (V)'

      if source.startswith('LECROY'):
        ret = 'Time (seconds)', 'Y LABEL (V)'

      if source == 'calc_power_spectrum.py':
        ret = 'Frequency (KHz)', '$V^{\ 2}$'

      if source == 'wzextract.py':
        ret = 'Z position (um)', 'PMT Voltage (V)'

    return ret
